generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  name             String
  email            String            @unique
  password         String
  role             Role              @default(USER)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  claims           Claim[]
  consultations    Consultation[]
  diasporaRequests DiasporaRequest[]
  quotes           Quote[]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  features    String[]
  category    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Claim {
  id             Int        @id @default(autoincrement())
  userId         Int?
  policyNumber   String
  claimType      String
  incidentDate   DateTime
  estimatedLoss  Float
  description    String
  status         String     @default("pending")
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  submitterEmail String?
  submitterName  String?
  submitterPhone String?
  user           User?      @relation(fields: [userId], references: [id])
  documents      Document[] @relation("ClaimDocuments")
}

model Quote {
  id            Int        @id @default(autoincrement())
  userId        Int?
  firstName     String
  lastName      String
  email         String
  phone         String
  location      String?
  product       String
  budget        String?
  coverage      String?
  details       String?
  contactMethod String
  bestTime      String?
  status        String     @default("pending")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  documents     Document[] @relation("QuoteDocuments")
  user          User?      @relation(fields: [userId], references: [id])
}

model Consultation {
  id              Int       @id @default(autoincrement())
  userId          Int?
  name            String
  email           String
  phone           String
  country         String
  timezone        String
  serviceInterest String
  scheduledAt     DateTime?
  status          String    @default("pending")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User?     @relation(fields: [userId], references: [id])
}

model DiasporaRequest {
  id              Int       @id @default(autoincrement())
  userId          Int?
  name            String
  email           String
  phone           String
  country         String
  timezone        String
  serviceInterest String
  scheduledAt     DateTime?
  status          String    @default("pending")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User?     @relation(fields: [userId], references: [id])
}

model Document {
  id           Int      @id @default(autoincrement())
  filename     String
  originalName String
  mimeType     String
  size         Int
  path         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  claimId      Int?
  quoteId      Int?
  content      Bytes?
  claim        Claim?   @relation("ClaimDocuments", fields: [claimId], references: [id], onDelete: Cascade)
  quote        Quote?   @relation("QuoteDocuments", fields: [quoteId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}
