generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                 @id @default(autoincrement())
  name               String
  email              String              @unique
  password           String
  role               Role                @default(USER)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  claims             Claim[]
  consultations      Consultation[]
  diasporaRequests   DiasporaRequest[]
  quotes             Quote[]
  outsourcingRequests OutsourcingRequest[]
  payments           Payment[]
  policies           Policy[]
  createdResources   Resource[]          @relation("ResourceCreator")
  adminNotes         AdminNote[]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  features    String[]
  category    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Claim {
  id             Int        @id @default(autoincrement())
  userId         Int?
  policyNumber   String
  claimType      String
  incidentDate   DateTime
  estimatedLoss  Float
  description    String
  status         String     @default("pending")
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  submitterEmail String?
  submitterName  String?
  submitterPhone String?
  user           User?      @relation(fields: [userId], references: [id])
  documents      Document[] @relation("ClaimDocuments")
}

model Quote {
  id            Int        @id @default(autoincrement())
  userId        Int?
  firstName     String
  lastName      String
  email         String
  phone         String
  location      String?
  product       String
  budget        String?
  coverage      String?
  details       String?
  contactMethod String
  bestTime      String?
  status        String     @default("pending")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  documents     Document[] @relation("QuoteDocuments")
  user          User?      @relation(fields: [userId], references: [id])
}

model Consultation {
  id              Int       @id @default(autoincrement())
  userId          Int?
  name            String
  email           String
  phone           String
  country         String
  timezone        String
  serviceInterest String
  serviceType     String
  scheduledAt     DateTime?
  status          String    @default("pending")
  meetingLink     String?
  duration        Int       @default(60)
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User?     @relation(fields: [userId], references: [id])
}

model DiasporaRequest {
  id              Int       @id @default(autoincrement())
  userId          Int?
  name            String
  email           String
  phone           String
  country         String
  timezone        String
  serviceInterest String
  scheduledAt     DateTime?
  status          String    @default("pending")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User?     @relation(fields: [userId], references: [id])
}

model Document {
  id           Int      @id @default(autoincrement())
  filename     String
  originalName String
  mimeType     String
  size         Int
  path         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  claimId      Int?
  quoteId      Int?
  outsourcingId Int?
  content      Bytes?
  claim        Claim?   @relation("ClaimDocuments", fields: [claimId], references: [id], onDelete: Cascade)
  quote        Quote?   @relation("QuoteDocuments", fields: [quoteId], references: [id], onDelete: Cascade)
  outsourcing  OutsourcingRequest? @relation("OutsourcingDocuments", fields: [outsourcingId], references: [id], onDelete: Cascade)
}

model OutsourcingRequest {
  id                  Int       @id @default(autoincrement())
  userId             Int?
  organizationName   String
  coreFunctions     String?
  location          String
  address           String?
  email             String
  services          String[]
  natureOfOutsourcing String
  budgetRange       String
  status            String    @default("pending")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User?     @relation(fields: [userId], references: [id])
  documents         Document[] @relation("OutsourcingDocuments")
}

model Payment {
  id            Int      @id @default(autoincrement())
  userId        Int?
  amount        Float
  currency      String   @default("KES")
  status        String   @default("pending")
  paymentMethod String
  reference     String?  @unique
  transactionId String?  @unique
  description  String?
  metadata     Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User?    @relation(fields: [userId], references: [id])
}

model Resource {
  id          Int      @id @default(autoincrement())
  name        String
  title       String?
  description String?
  category    String
  filePath    String?
  fileSize    Int?
  mimeType    String?
  isPublic    Boolean  @default(false)
  adminOnly   Boolean  @default(false)
  downloads   Int      @default(0)
  creatorId   Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creator     User?    @relation("ResourceCreator", fields: [creatorId], references: [id])
}

model Policy {
  id          Int      @id @default(autoincrement())
  userId      Int?
  policyNumber String  @unique
  type        String
  status      String   @default("active")
  startDate   DateTime
  endDate     DateTime
  premium     Float
  coverage    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User?    @relation(fields: [userId], references: [id])
}

model AdminNote {
  id         Int      @id @default(autoincrement())
  userId     Int?
  adminId    Int?
  note       String
  type       String   @default("general")
  entityType String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User?    @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
}
